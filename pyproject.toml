[tool.black]
target-version = ["py312"]
exclude = '''
/(
    \.git
  | \.mypy_cache
  | \.pytest_cache
  | env
  | __pycache__
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
skip = ["env", "__pycache__"]

[tool.pytest.ini_options]
# Directorios donde buscar tests
testpaths = ["tests"]

# Patrones de archivos de test
python_files = ["test_*.py", "*_test.py"]

# Patrones de clases de test
python_classes = ["Test*"]

# Patrones de funciones de test
python_functions = ["test_*"]

# Marcadores personalizados
markers = [
    "unit: marca tests unitarios",
    "integration: marca tests de integración", 
    "slow: marca tests que tardan mucho en ejecutarse",
    "database: marca tests que requieren base de datos",
    "api: marca tests de endpoints de la API"
]

# Opciones por defecto
addopts = [
    "-v",
    "--tb=short", 
    "--strict-markers",
    "--disable-warnings",
    "--color=yes",
    "--durations=10",
    "--cov=app",
    "--cov-report=html:htmlcov",
    "--cov-report=term-missing",
    "--cov-fail-under=75"
]

# Filtros de warnings
filterwarnings = [
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning",
    "ignore:.*class-based.*config.*:UserWarning",
    "ignore:.*orm_mode.*:UserWarning"
]

# Variables de entorno para tests
env = [
    "TESTING=true",
    "PYTHONPATH=."
]

# Configuración de logging
log_cli = true
log_cli_level = "INFO"
log_cli_format = "%(asctime)s [%(levelname)8s] %(name)s: %(message)s"
log_cli_date_format = "%Y-%m-%d %H:%M:%S"

[tool.coverage.run]
source = ["app"]
omit = [
    "*/tests/*",
    "*/env/*",
    "*/__pycache__/*",
    "*/migrations/*"
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError"
]